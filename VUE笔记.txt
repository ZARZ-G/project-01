VUE2笔记
VUE 开发者 尤雨溪
vue 是js的渐进式框架 
vue特点: 采用组件化模式  声明式编码	 使用虚拟DOM和Diff算法 尽量复用DOM节点
js采用式命令式编码
node是js的运行环境 后端
容器和实例一一对应
开发中只有一个Vue实例 并且配合组件一起使用
new Vue({配置对象})
Vue模板分为2大类
1.插值语法 {{xxx}} //里面写js的表达式
2.指令语法 v-bind===可以简写成 :
v-bind:href="url" // 给href属性绑定超链接 主要功能给标签中的某个属性绑定值用v-bind
Vue支持单向绑定和双向绑定 v-bind 和v-model 
v-model 只能用在表单元素上 简写写法v-model="value"
Vue里的函数不能用箭头函数
*Vue 参考的模型式MVVM 中的VM 所以他的实例名叫vm最合适
给对象添加属性// object.defineProoerty(对象名,'属性名',{value:值})
数据代理：通过一个对象代理另一个对象的属性的操作
_data==data //内置getter setter  实时更新数据
v-on:click='方法名'   简写@ //绑定事件
事件回调需要配置在methods对象中，会自带挂载在vm实例上
Vue中的内置函数this指向vm或组件对象

//常用修饰符可以连写  只能在V-on指令上使用
.prevent 阻止事件的默认行为
.stop 阻止事件冒泡//给子元素添加
.stop.prevent 阻止默认行为和冒泡
.self 阻止子元素的事件冒泡 //给父元素添加
.capture 事件捕获 //给父元素添加
.once事件只触发一次
.passive事件的默认行为会立即执行 无需等待回调执行完毕
 arr.filter ()//过滤数组或数组对象

MVVM 详细分析
  M 模型 对应data的数据
  V 视图  对应模板/容器
  VM 视图模型  对应Vue实例对象
  
VM特点：
data 中的所有的数据都出现在vm对象身上
vm身上所有的属性以及Vue原型上的属性在Vue模板中都可以使用

Vue中的数据代理
	通过vm对象来代理data对象中的属性的读写操作
数据代理的好处
	更加方便操作data中的数据
基本原理
	通过Object.defineProperty() 把data对象中所有属性添加到vm对象上
	为每一个添加到vm对象上的属性指定一个getter/setter方法
	在getter/setter 内部去操作读写data对象中对应的属性
	
computed:{ 内置对象{get.set}}  用来定义计算属性 是一个对象 内置geter 和setter，getter自带缓存  
split('-') //将字符串拆开 返回数组
slice(0,1)//将字符串截取
Vue内部的this指向vm对象 
watch:{handler(newVlaue,oldValue){}}//用来监视属性
deep//开启深度监视 监视多级数据 
Vue默认能监视多级属性
监视属性可以进行异步操作，计算属性不能进行异步操作, 监视属性可以监视计算属性
计算属性能完成的监视属性也能完成
为了让this的指向是vm ==》被Vue管理的函数写成普通函数  不被Vue管理的函数写成箭头函数   
在Vue中冒号后面是表达式
v--show 隐藏元素 || v-if  直接移除元素//控制显示和隐藏
要想使用Vue代码 必须在script代码中创建Vue实例
v-if v-else-if v-else //多条件判断语法
template标签的使用只能和v-if 配合使用 不能和v-show配合使用  不是真正的dom节点
template属性不会显示在dom树上 用来解析模块标签
v-for="(p,index) of person :key='index' "//可以遍历对象和数组  
监视属性的简写形式 ==》属性名(newValue,oldValue){}
indexOf()//包含   0 表示匹配到了  -1 没有匹配到 
字符串能匹配空字符串 返回0
升序是p1-p2 降序是p2-p1
*Vue.set(vm._data,‘age’,'男') 或者 vm.$set() //在_data上手动添加属性或者修改属性
 此方法不能在data里和vm 对象上添加属性  通过此方法可以修改数组和对象的值

数组的splice方法：
数组中最强大的方法splice()，可以对数组进行添加、删除、替换操作
删除
arr=[‘0赵’,‘1钱’,‘2孙’,‘3李’,‘4周’,‘5吴’]
arr.splice(index,num)
第一个参数表示开始删除的索引位置，num表示删除的个数
如arr.splice(1,2)
返回的结果为:arr=[‘0赵’,‘3李’,‘4周’,‘5吴’]
添加
arr=[‘0赵’,‘1钱’,‘2孙’,‘5吴’]
arr.splice(index,0,‘x’,‘y’)
第一个参数表示开始插入的索引位置，0表示删除0个，后面的表示添加的元素
如 arr.splice(2,0,‘haaa’,‘wuuu’]
返回的结果为:arr=[‘0赵’,‘1钱’,‘haaa’,‘wuuu’,‘2孙’,‘5吴’]
替换
arr=[‘red’,‘yellow’,‘green’,‘blue’]
arr.splice(index,num,‘x’,‘y’,‘z’)
第一个参数表示开始删除的索引，num表示删除的个数，后面的几个元素插入到删除的位置上
Vue监视对象中的数据  通过setter方法
Vue监视数组中的数据  通包裹数组更新元素的方法实现 原理：调用原生对应的方法对数组进行更新,重新解析模板,用来更新页面
表单里的radio按钮要想获得值需要额外添加value属性
表单里的checkbox要想获得值需要额外添加value属性并且要用数组来存值
v-model.number //用来修饰年龄
v-model.lazy //让textarea不实时更新
v-model.trim//去首尾空格
v-text//向标签里添加文字会替换标签里的文字
v-html //能解析标签 但是不安全
filters{fn(){}}  //过滤器 支持插值和v-bind  并且支持串联
Vue特殊指令：
v-cloak 是一个特殊的属性 Vue实例创建完毕并接管容器后 会删掉v-cloak属性 解决网速慢页面显示未解析的模板问题
使用css 配合v-cloak可以解决网速慢页面展示出{{xxx}}的问题
v-once 首次会被渲染之后就变成静态内容不在改变 主要用于优化性能
v-pre 跳过所在节点的编译过程  可跳过没有使用指令语法 没有使用插值语法的节点 加快编译
directives:{} //声明自定义的指令的关键字  命名格式'bind-number':(){}
自定义指令何时被调用:
	指令与元素成功绑定时调用
	指令所在的模板被重新解析时调用
自定义指令包含  
			  bind函数 指令与元素绑定时调用
			  inserted函数 指令所在的元素插入页面时调用
			  update函数  指令所在模块被重新解析时调用
共同点：他们的this指向window 
全局自定义指令 Vue.directive(指令名,配置对象或者回调函数)

Vue的生命周期==》 创建  挂载 更新  销毁
	  又叫生命周期回调函数 生命周期函数 生命周期钩子
	  是指Vue在关键的时刻帮我们调用的一些特殊的函数
	  生命周期函数的名字不可改变但具体逻辑是根据需求编写的
	  生命周期的this 指向vm 或者组件实例对象

mounted() {} //完成解析并把初始的真实dom放入到页面上之后执行

vue的钩子函数:
	 创建
     beforeCreate 
	 created
	 挂载
	 beforeMount
	 mounted
	 更新
	 beforeUpdate
	 updated
	 销毁
	 beforeDestroy
	 destroyed
使用了 keep-alive时多出了两个钩子
	activited  路由组件激活时触发
	deactivited  路由组件失活时触发
	
	$nextTick 下一轮 
 Vue常用的生命周期钩子
	  mounted 发送ajax请求 启动定时器 绑定自定义事件 订阅消息等
	  beforeDestroy 清除定时器  解绑自定义事件 取消订阅消息等
 关于销毁Vue实例 
	销毁后借助Vue开发者工具包看不到任何消息
	销毁后自定义事件会失效 但原生Dom事件依然有效
	一般不会在beforeDestroy操作数据  就算操作数据也不会在触发更新流程了
 
组件 分为非单文件组件 和单文件组件
组件的使用步骤 
	 定义组件 
	 注册组件
	 使用组件

定义组件的方法 Vue.extend()
	el 不写 由vm管理
	data 必须写成函数 避免组件复用时数据存在引用关系
	使用template属性可以配置组件结构
如何注册组件
	局部注测 new Vue的时候传入components:{}对象
	全局注册 Vue.component('组件名',组件相关配置)

编写组件的标签
	<school></school>

关于组件名
		一个单词组成
		第一种写法 首字母小写
		第二种写法 首字母大写 *推荐
多个单词组成
		第一种写法 短横线命名 my-school  
		第二种写法 驼峰法 mySchool （需要脚手架）
组件名尽可能回避html中已经有的元素的名称 h1等
可以使用name配置组件名在开发者工具中的名字

关于组件标签
	可以写成双标签	<school></school>  或者 单标签</school> 
    组件中的钩子函数和vm身上的一样
声明组件时可以省略掉Vue.extend({})  vue会自动补全
组件嵌套 主组件是App
组件的本质就是VueComponet构造函数  Vue.extend生成的

调用组件标签就会执行一次组件的构造函数
每次调用 Vue.extend 都会返回一个全新的VueComponet
关于this指向
组件配置中this指向VueComponent实例对象
在Vue中this 指向vm或者组件对象
VueComponent 组件实例对象 简称vc 
vc!=vm

*内置关系 VueComponent.prototype.__proto__===Vue.prototype  
让组件实例对象vc可以访问到Vue原型对象上的属性和方法

npm i @vue/cli  -g  //安装全局脚手架 
*vue create xxx //创建脚手架 脚手架的名字要小写
*npm run serve //运行脚手架
*修改vue.config中的内容 加上 lintOnSave:false /关闭语法检查/

关于不同版本的Vue
	vue.js是完整版的Vue 包含核心功能和模板解析器
	vue.runtime.xxx.js是运行版的Vue 只有核心功能没有模板解析器不能使用template配置项  需要配合random函数实现模板解析功能

Vue获取dom元素或者组件 用ref属性标识 ref="对象名字" id的替代者 获取方法this.$refs.对象名字  
ref是vue或者vc自带的属性 $refs 是一个对象 { 对象名字：元素}


*单文件组件使用==》在父组件里注册子组件 父组件不需要注册 父组件直接使用子组件标签

组件里的props属性  //接收父组件传递过来的属性或者方法 它的优先级更高 使用props声明的属性不建议修改数据否则会出现警告
诺想要修改需要声明一个新属性接收props传递过来的属性 然后修改
冒号可以让数字值的属性转换成Number类型

Vue混入 mixin 功能 把多个组件公共的配置对象提取成一个混入对象
使用方式
		定义组件{data(){},methods:{},....}
		使用混入 全局混入Vue.mixin(xxx)  局部混入mixins:['xxx']

插件的功能 用于增强Vue 
插件的本质  包含install方法的一个对象 install方法的第一个参数是Vue 第二个参数是使用者传递的数据
定义插件  对象.install =function(vue,options){全局过滤器 全局指令 全局混入 实例方法}
使用方法 Vue.use()

定义局部样式  <style scoped  lang="less"//语言选择></style>  防止冲突


模块 向外提供功能的js文件
原因	 js文件很复杂
作用 复用js 简化js的编写 提高js运行效率

组件  用来实现局部功能效果的代码集合 h5 c3 js 
原因  一个界面的功能很复杂
作用  复用代码 简化项目编码 提高运行效率

模块化 当应用中的js都是以模块来编写的那这个应用就是一个模块化的应用
组件化 当应用中的功能都以多组件的方式编写的 那这个应用就是组件化的应用

组件包括三个标签  <template>模版</template>  <script>js </script>   <style>样式</style>
nanoid 插件 随机数  时间戳 //随机生成id

 //累加数组被选中的个数
 return this.todolist.reduce((pre, next) => pre += next.done ? 1 : 0, 0)

浏览器存储包括localstorage sessionStorage 容量为5M
相关函数  setItem   getItem removeItem clear
sessionStorage 保存的数据关闭浏览器后数据丢失
localstorage  数据需要手动删除 或调用api函数删除
如果数据为空 返回null
json.parse(null) 返回null


组件化编码流程：
	一：拆分静态组件 组件要按照功能点拆分 命名不要与html冲突
	二：实现动态组件 考虑好数据的存放位置 数据是一个组件在用 还是很多组件在用
	数据是一个组件在用 放到组件自身
	很多组件在用 	放在他们共同的父组件上
	
	props 实现 父组件到子组件的通信 
					 子组件到父组件的通信 （父组件先传给子组件一个函数）
	使用v-model时注意 v-model绑定的值不能是props传过来的值 因为props是不能修改的
	props传过来的是对象类型的值 修改对象中的属性value不会报错 但不推荐这么做

this.$emit(‘自定义事件名字’，'传过去的数据')//获取自定义事件 vc内置方法
this.$off(‘自定义事件名字’’)  注销VM 注销VC //解绑自定义事件 	

VUE 数据通信的方法：
父给子 推荐props  $ref   this.$refs.student.$on('getdata', this.fn)  插槽
子给父  不推荐props  父传子方法  全局事件总线   VueX  消息订阅与发布 作用域插槽 自定义事件 refs
兄弟传  全局事件总线   VueX  消息订阅与发布
全局事件总线安装方法 在beforeCreate钩子里配置 Vue.prototype.$bus=this (vm)
*全局事件总线的使用 
		new Vue({
			beforeCreate(){
			//将Vue对象上的api赋值给$bus 
				Vue.prototype.$bus=this 
			}
		})
使用方法
		接收数据方
		mounted(){
		this.$bus.$on('自定义事件名',(data)=>{})
		}
		提供数据方 //按钮要写在该组件里
		function fn(){
		this.$bus.$emit('自定义事件名',this.data)
		}
       在beforeDestroy钩子里用$off去解绑当前组件的所用到的事件

订阅与发布的使用	
	安装 npm i pubsub-js
	引入 import pubsub from pubsub-js'
	
	接收数据 mounted (){
	this.pid= pubsub.subscribe('自定义事件名',(msg,data)=>{})
	}
	最好在before Destroy钩子里 用pubsub.unsubscribe(pid) 取消订阅
	
	提供数据 pubsub.publish(’自定义事件名‘,this.data)

nextTick //在下一次dom更新后执行
		this.$nextTick(回调函数)

vue封装动画与过渡
vue中的transition 标签定于动画   加上appear 关键字页面刷新就播放动画
  v-enter-active //进入  v-enter  v-enter-to
  v-leave-active  //离开  v-leave  v-leave-to
有多个元素需要过渡 需要使用 <transition-group> 给每个加key值

代理服务器解决跨域问题
	   //开启代理服务器 在vue.config配置文件中
	   方式一 ：开启一个代理服务器
	  devServer: {
		proxy: 'http://localhost:5001'//端口号写服务器里的端口号 url 地址写本地请求地址
	  }
		方式二：开启多个代理服务器
		
	  devServer:{
	  proxy:{
		'/api1':{
				target:'http://localhost:5000'，
				changeOrigin:true//改变本地url地址的端口号为服务器的端口号
					//false//服务器的请求头host是 localhotst:8081 默认
				pathRewrite:{'^/api1':' '}
					}
				},
				
		'/api2':{
				target:'http://localhost:5001'
				changeOrigin:true //服务器的请求头host为 localhost:5001
				//changeOrigin默认是false  服务器的请求头host是 localhotst:8081
				pathRewrite:{'^/api1':' '}
					}
		},
	}
	
代理服务器特点 协议 域名 端口号要和服务器保持一致	
发起get请求时 协议 域名 端口号要和本机地址一致 后面加上代理服务器的后缀名 

安装 npm i  vue-resource 
vue中的this.$http 功能和axios一样 更推荐使用axios

f
插槽分为 默认插槽 作用域插槽 具名插槽  
插槽标签<slot></slot>在Dom中不显示, name属性给子组件的slot标签起名字   父组件使用声明插槽加 slot='name'   v-slot:box1
使用template 标签包裹同名字的插槽 
作用 让父组件可以向子组件指定位置插入html结构  适用于父组件==》子组件 通信
作用域插槽原理： 数据在组件的自身 但数据生成的结构由组件使用者决定  *用法给使用者添加 scope="games"    子组件==》父组件

VueX 实现集中式状态管理的插件 可以实现任意组件的通信 实时共享数据
vuex包括三个常用的对象 actions{定义方法}  mutations{方法体}  state{原始数据} 
Vue.config.silent = true   // 关闭Vue身上的所有的警告 再main.js中配置

vc中读取vuex中的数据 $store.state.sum
vc中修改vuex中的数据 $store.dispatch("方法名字",要传的数据) 或者$storee.commite('方法名字','数据')
如果没有ajax请求或其他业务逻辑 可以不写 dispatch 越过actions 直接写 commit

getters对象的使用 当state中的数据需要加工时再使用getters
使用map方法优化计算属性： 
...mapState 帮我们映射state中的数据为计算属性   
	computer
	{                  //计算属性的名字,state里的变量名字
	...mapState({sum:'sum'})
	...mapState(['sum'])
 
...mapGetters 帮我们映射getters中的数据为计算属性   
 			         //计算属性的名字,getters里的方法的名字
	...mapGetters({bigSum:'bigSum'})
	...mapGetters(['bigSum'])
	}
	
   
	// 简写mutations里的方法
	methods{				
								//方法名，mutations的方法名
	...mapMutations({ jia: 'JIA', jian: 'JIAN' }),
    ...mapMutations(['JIA', 'JIAN'])

	//简写 actions里的方法   actions里的方法名字小写
							   	//方法名，actions的方法名
	...mapActions({ jisuojia: 'jishuojia', denghuijia: 'denghuijia' }),
	...mapActions(['jishuojia', 'denghuijia'])}
	}

模块化+命名空间目的：让代码更好维护 让多种数据更加明确
开启命名空间的方法  namespaced: true

路由的实现了单页面的响应 优化网页的性能 key-value 关系
安装路由 npm i vue-router@3   //v2   v3:4
实现切换 active-class="active" //高亮
<router-link  to="/Home"></router-link> //相当于a链接
<router-view></router-view> //指定显示的位置

路由组件存放到 pages文件夹里 一般组件放到 components 文件夹
切换路由隐藏的路由组件会被销毁 需要的时候再去挂载
每个组件都有自己的$route属性 里面存着自己的路由信息
整个应用只有一个router （l路由器） 可以通过$router属性获取
子级路由不要写 /   跳转时要写父亲的路径加自己的路径
命名路由 简化跳转链接 :to="{name:'hello'}"

路由的query传值
	 <!-- 使用？号传参数 -->
		<!-- <router-link :to="`/home/news/three?id=${m.id}&title=${m.title}`">{{ m.title }}</router-link> -->
		<!-- 对象写法 -->
		<router-link :to="{
		//path 只能写单引号
		path: '/home/news/three',
		query: {
			id: m.id,
			title: m.title
		}
	}">
		{{ m.title }}
	</router-link>
接收参数
$route.query.id 

name属性用来给路由起名字 可以代替path属性
数据传递原理 父组件先将数据传递给路由身上 再让路由渲染到子组件上
路由配置里的path属性不能少  但参数里可以用name属性代替

路由的params传值
	声明path路径时加上demo/:id/:title 使用占位符接收params参数
	:to后面加上要传递的参数 /${m.id}/${m.title}  //字符串传参
	使用对象传参时不能使用path属性 只能写name属性  用params对象接收参数
	$route.parsms.id 

 路由的props传值
	// props: { a: 100, b: 200 } 只能传递死数据 不推荐使用
	// props: true  //只能把params参数的数据传递出去 不支持query 
	//props函数形式 支持query传值和params传值
	props({ query }) {
		return { id: query.id, title: query.title }
	}

接收方式 props:['id','title']                                                                                                                                                                                                                                                                                                                                                                                                                                  

路由组件的历史记录默认是push  添加replace属性 可以替换当前的历史记录
编程式路由导航 不借助router-link 实现路由跳转 让路由跳转更加灵活
路由器的接口 this.$router.push({}) 添加历史记录默认  this.$router.replace({}) 替换历史记录 
this.$router.back() 后退  this.$router.forward() 前进  this.$router.go() 可前可后
	
<keep-alive  include="路由组件名字">展示区</keep-alive>保存路由组件的数据 写上这个标签路由组件就不会触发销毁钩子
<KeepAlive :include="Home, Dome"> 第二种写法 指定保存路由组件

路由守卫
	使用前最后给路由起个名字
	作用对路由权限的控制
	分为全局守卫 独享守卫 组件内守卫
	全局前置守卫 beforeEach:(to,from,next)=>{}初始化时执行 每次路由切换前执行  使用方法直接在index.js文件里定义
	全局后置守卫 afterEach:(to,from)=>{}初始化时执行 每次路由切换后执行  使用方法直接在index.js文件里定义
	独享守卫 beforeEnter:(to,from,next)=>{} 定义在路由的配置里
	组件内路由守卫  beforeRoutEnter(to,from,next)    //通过路由规则进入路由时触发
								  beforerouteLeave(to,from,next)  //通过路由规则离开路由时触发
meta属性 路由元信息 存自定义属性 meta:{isAuth:true, title:'信息'}
项目写好后打包的命令是 npm run build
将打包好的文件部署到服务器上才能看到
hash值是指 #后面的内容就是hash值
hash值不会包含在http请求中 hash不给服务器
路由器的两种工作模式：
hash模式 地址中永远带着#号 手机验证可能会被标记成不合法 兼容性强
history模式 地址干净 兼容性略差 应用部署上线时需要后端人员支持 解决了刷新页面404问题

npm i -g nodemon //服务器自动更新模块
npm i connect-history-api-fallback //解决history模式刷新页面出现404问题 
  devServer:{
    client:{
      overlay:false
    }
  }
cmd 进入桌面 ：cd Desktop

Vite笔记					
Vite 是前端构建工具
优势如下 开发环境中 无需打包操作 可以快速冷启动
清凉快速的热重载
按需编译 

Vite的创建命令
    npm init vite-app test
	cd test 
	npm install
	npm run dev  //运行vite 
						
						
VUE3 笔记
lintOnSave:false  //关闭语法检查
setup方法 return{}
return （）=>h('盒子名字','盒子内容') //渲染函数原理
setup中的配置尽量不要与vue2中的配置混用
    Vue2配置可以访问到setup中的属性方法
	但在setup中不能访问到Vue2的配置
	如果重名 setup优先
setup不能是一个async函数因为返回值不是return的对象 而是promise 模板看不到return 对象的属性
import {ref} from 'vue' //引入vue中的ref方法 该方法可以把变量变成响应式的数据
js想拿到ref标记的变量就要使用xxx.value属性来查看 修改也是通过xxx.value属性来完成
模板中读取数据不需要.value
ref引用对象接收的数据可以是基本数据类型也可以是对象类型
基本数据类型响应式依靠Object.definePropert()的get和set完成
对象类型的数据 内部求助了vue3中的一个新函数reactive函数 内部实现了proxy函数

reactive函数
作用 定义一个对象类型的响应式数据 基本类型不要用它用ref
语法 const 代理对象 =reactive(源对象)接收一个对象或数组 返回一个代理对象（Proxy的对象）
reactive定义的响应式数据是深层次的
内部基于ES6的Proxy实现6的Proxy实现 通过代理对象操作源对象内部数据进行操作

Vue2的响应式原理
	对象类型通过Object.defineProoerty()对属性的读取修改进行数据劫持
	数组类型通过重写更新数组的一系列方法来实现数据劫持 对数组对象的变更进行了包裹
	
	存在问题新增属性 删除属性界面不会更新
	直接通过下标修改数组 界面不会自动更新
	修改解决办法就是使用 this. $set(target, ‘属性名字’,属性值) 或者Vue.set(target, ‘属性名字’,属性值)
    删除解决办法就是使用 this.$delete(target,‘属性名’) 后者Vue.delete(target,‘属性名’)

Vue3的响应原理
通过Proxy 拦截对象中的任意属性的变化 属性的修改 删除 添加等
通过Proxy 反射 对源对象的属性进行操作

reactive对比ref
从定义数据的角度比
	ref 用来定义 基本数据类型 也可以定义对象类型的数据它内部会自动通过reactive转为代理对象
	reactive 用来定义对象或着数组
从原理的角度对比
	ref通过Object.definePropert()的get与set来实现数据劫持
	reactive通过使用Proxy来实现数据劫持 并通过Reflect 操作源对象内部的数据
从使用角度来比较
	ref 操作数据需要写.value  读取数据不用写.value
	reactive 定义的数据读写都不需要写.value

setup两个注意点
	setup在beforeCreate之前执行一次 this是undefined
setup包含两个参数 ==>setup(props,context)
	props 值为对象 包含： 组件外部传递过来且组件内部声明接收了属性
	context 上下文对象
		attrs 值为对象 包含：组件外部传递过来 但没有props配置中声明的属性 相当与this.$attr
		slots 收到的插槽内容 相当于 this.$slots
		emit 分发自定义事件的函数 相当于this.$emit
*Vue3中声明具名插槽要写成 v-slot:box1
VUE3中的computed 计算属性与VUE2配置功能一样
import {computed} from 'vue' //使用方法
Vue3中的watch监视属性和Vue2中的配置功能一样
    两个小坑  ：监视reactive定义的响应式数据时 oldvalue无法正确获取 强制开启深度监视 deep配置无效
	监视reactive定义的响应式数据中的某个属性时(该属性是个对象类型的) deep有效
	监视ref类型的对象属性 需要加.value 或者开启deep :true
wactchEffect函数 不用指明监视的属性，监视的回调中用到那个属性，就监视那个属性
watch 既要监视属性，也要指明监视的回调
wacthEffect 有点像计算属性
	计算属性需要写返回值 注重回调函数的返回值，而wachtEffect不用写返回值 注重回调函数的函数体
    初始化时会执行  用到属性时就会执行

Vue3中的生命周期和Vue2中的差不多 可以写外部也可以写组合式Api类型
Vue3把Vue2里的beforeDestroy和destroyed 改成 beforeUnmount 和unmounted  销毁改成卸载了

hook作用 类似与vue2中的混入  hook函数封装setup中使用的组合式Api
自定义hook的优势  复用代码 让setup中的逻辑更加清楚易懂

toRef 作用 创建一个ref对象 它的值指向另一个对象的某个属性
语法 const name= toRef(person,'name')
应用 将响应式对象中的某个属性单独提供给外部使用时
扩展 toRefs与toRefs功能一致 但可以批量创建多个对象 ...toRefs(person)

shallowReactive  只处理对象最外层的响应式(浅响应式) 
shallowRef 只处理基本类型的响应式 不进行对象的响应式处理
使用场景：
    如果有一个对象数据 结构比较浅 变化的是外层数据用 shallowReactive
	如果有一个对象数据 后续功能不会修改该对象中的属性 而是生新的对象来替换  shallowRef

readonly 让一个响应式的数据变成只读的 (深只读)
shallowReadonly 让一个响应式的数据变成只读的 (浅只读)
使用场景 不希望数据被修改时


toRaw 将一个reactive生成的响应式对象转为普通对象  对这个普通对象的操作不会引起页面更新
markRaw 标记一个对象 使其永远不会成为响应式的对象
	有些值不应被设置成响应式时使用
	渲染不可变数据的列表时 使用可以提高性能



				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
						
						
						
						
	
	
	
	
	
	
















































































































































Promise笔记
Promise 是一个构造函数也是异步编程的解决方案
从功能上来说 promise对象用来封装一个异步操作并获取成功或者失败的结果
*优点：
1.支持链式调用解决回调地狱问题
2.指定回调函数的方式更加灵活
回调地狱的概念：回调函数里面嵌套回调函数
解决回调地狱的问题 promise async/await  生成器函数实例
function rand() { return  Math.ceil(Math.random()*(n-m+1))+m-1}//随机数方法
const p = new promise((resolve,reject) => { }) //promise 语法格式
resolve() 表示成功   reject()表示失败
*util.promisify(回调函数).then(方法一，方法二)//将回调函数转换成promise类型的函数
promise 方法内置 resolve()  reject() all() race() then() 
throw '错误' //改变状态
cath(err=>{}) //捕获错误
async 返回promise对象 
await必须写在async函数里
await右边一般都是promise对象
Promise.all([promise对象…]) //都成功才成功 否则失败
Promise.race([promise对象…])//返回第一个对象的结果
//then方法链式调用的原理：
then方法返回的结果不是Promise 的对象 它的状态为成功 值由返回的内容决定
then方法返回的结果是Promise的对象  它的状态由Promise对象的状态决定 值由Promise对象的值决定
then方法中抛出错误 它的状态为失败 值为抛出错误的值
中断promise链的方法就是返回一个pending状态的promise对象
以*标识的函数名就叫生成器
 Set() //集合
Map对象支持for of 遍历
for in 遍历键
for of 遍历值
注意 for of 不能遍历对象否则报错
class 类中的属性和方法叫做静态成员 实例成员可以访问到 非静态成员实例对象访问不到


WebPack笔记
webpack功能 将写好的代码压提高浏览器的性能和兼容性
"dev": "set NODE_OPTIONS=--openssl-legacy-provider &&webpack" //解决node版本高运行不了的问题
webpack的使用步骤
安装webpack @5.42.1 webpack-cli@4.7.2 -D
配置webpack 
运行webpack的script脚本
引入dist/main.js
npm i webpack-dev-server@3.11.2 -D //安装webpack实时更新模块
npm i  html-webpack-plugin -D  //指定访问路径的插件 功能：将指定的页面复制到内存中，自动添加js文件
//loader加载器执行流程：
webpack只能处理js文件  如果发现非js文件他会去webpack.config.js文件中匹配对象后缀名的loader加载器 
先将该文件放到最后一个loader进行处理 再将处理好的结果转交给下一个loader  如果没有loader了就将结果
转交给webpack  将处理好的结果合并到/dist/main.js 中  最后生成打包好的文件
开发阶段 文件在内存中  发布阶段文件在硬盘上
@ 表示根目录



