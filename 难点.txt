get请求 featch   jquery  axios  xhr对象
//创建服务器的两种方法：
	使用http内置模块 缺点中文会出现乱码 使用cors或者解决中文乱码需要配置响应头比较麻烦
	express模块 特点中文不会出现乱码 使用cors比较方便
	http模块解决中文乱码和跨域问题
	 res.writeHead(200, {
        "Content-Type": "application/json;charset=utf-8",
        // cors头,允许跨域，放行所有请求
        "access-control-allow-origin":"*"
    })
// Vue中数据赋值不能这样写  this.myage = this.myage++    
//应直接写成this.myage++  因为data对象中的属性由getter 和setter 实现数据实时更新
Node.js 基于CommandJS 
销毁Vue实例 this.$destroy()
让文本框自动获取焦点 加上 autofocus 属性
| 管道分割符 将参数从左边传到右边
Vue数据劫持 基于Object.defineProperty(obj, prop, descriptor) 该方法是在对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。监听对象里的某个属性，做数据劫持处理。
Vue数据代理 data===_data
Vue中的v-show 和v-if  值是false 不显示 true 显示
slice()//截取字符串
Promise 是异步编程的一种解决方案
promise有三种状态：pending(等待态)，fulfiled(成功态)，rejected(失败态)；状态一旦改变，就不会再变
模块的两种请求 ：require 是服务器用的 import 是客户端用的
用 export 导出的模块，需要用 import 来进行导入，而不能用 require
BigInt(n)//大整形
str.mathAll(正则)//快速提取字符串
Promise.all()方法只有都成功才能成功 值为promise对象的值
Promise.allSettled()//方法只返回成功 值为promise对象的值
类中私有属性用#标识
flat()//降低数组维数
Object.entries()//将对象转换成数组
Object.fromentries()//将数组转换成对象
globalThis //全局对象
一个类中可以有多个构造函数,只能有一个析构函数。
异步编程的解决方案 promise 生成器函数 async函数 await对象   
await必须要写在async函数里  
ES6暴露语法 分别暴露  统一暴漏  默认暴露  
模块导入方式：
通用的导入方式
解构赋值形式
arr.includes()//判断数组是否包含某个元素
优化网页图片的方法 精灵图  转base64(小图片)
Object.assign(p1, p2) //对象的合并
Math.sign()判断数值是否为正数1 负数-1  零0
Math.trunc()//去小数
Number.parseInt () //字符串转整数   失败返回NaN
-S  //save 上线必带的包
-D //dev 开发中使用的包
import $ from 'jquery'//导入包
Number.ParseFloat()//字符串转小数  失败返回NaN
res.setHeader('Content-Type','text/html;charset=utf-8')//服务器发送的中文语句是乱码  该代码设置请求头来处理乱码 问题
req 是客户端  res是服务器端
\n是换行，英文是New line
\r是回车，英文是Carriage return
lintOnSave: false, VUE关闭提示信息
JS数据类型 USONB  Symbol
第七种数据类型 Symbol 类型
arguments 获取方法中的所有的参数
箭头函数适合与this无关的回调 定时器 数据回调
箭头函数不适合与和this有关的回调 事件回调 对象的方法
*前端开发遵循 模块化 组件化 自动化 规范化
node.js 下载第三方包前 需要先执行一下 npm init -y 命令进行初始化
app.use(cors())//cors是一个方法
req.query req.data()  req.end()  req.send() req.body() req.params 获取动态参数
req.query //获取查询字符串的内容
res.send（str）//将响应的结果发送到浏览器上
引用类型只有地址相同才相同 []===[] //false
将js转换成jquery 用$('对象名')  将jquery转换成js用[0]或get(0)
原型的作用: 共享数据, 节省内存空间
match() 返回正则匹配到的结果  可以作为方法的参数使用
node 导入模块的方法    const fs=require('fs')
get 没有请求体 post 有请求体
jsonp 支持get   cors  支持get post   功能：实现跨域请求  浏览器的同源策略阻止网页跨域请求
快速获取表单的值用serialize() 这是一个jquery方法 需要给input添加name属性    通过创建FormData()对象 快速获取表单的值
xhr.responseText属性的值是xhr请求的结果  ！！！
xhr.setRequestHeader('Content-type', 'application/x-www-form-urlencoded') 不好记  固定写法  设置请求标头
序列化和反序列化  json.stringify() json.parse()
json.parse()里面的参数必须是字符串类型
JSON 全称javascript对象表示法  json本质是字符串    可转换数字 字符串 布尔值 null 数组 对象 
XML可扩展标记语言
on 在……时候
*正则表达式\S\s的意思
[\s]表示匹配 空白字符
[\S]表示匹配 非空白字符
g表示匹配全局
两者同时出现[\s\S]表示匹配 任何字符
行高越大字体越往下走 反之亦然

给字符串加空格 +'\xa0' 
sort()
reverse()
push（）
pop()
shift()
unshift()
join(',')//将数组转换成字符串
concat() //合并
filter()
some()
every()
reduce()
findIndex()
isArray()
splice（）删数组指定元素
split(',')将字符串转换成数组
slice(m,n)切数组里的某一部分
replace() 替换字符串中的某个值
改变原数组的方法 push() pop() unshift() shift() sort() reverse() splice()
冒泡排序
如果数组中的第一个数大于第二个数
就把第一个数存到临时变量里
把第二个数赋值给第一个数
把临时变量赋值给第二个数

默认情况下sort方法是按ascii字母顺序排序的，而非我们认为是按数字大小排序
  arr.sort(function (a, b) {
//     >号升序 <降序
            return a > b ? 1 : -1
        })

 arr.reverse() 反转
函数没有返回值返回的结果就是undefined
函数表达式必须先声明后调用
0 true 
1 false


函数包括五部分组成
关键字function 
方法名 fn()
参数(x)
方法体{}
返回值 reutrn x

形参如果不赋值 要给默认值 否则就是NaN

json.parse()
json.stringify()
boolean(str)方法将变量转换成布尔类型 true 0或者是false 1  null "" 为false
null是object类型 表示空对象


内存分为堆和栈
数据类型分为简单数据类型和复杂数据类型
简单数据类型的值存到栈里
复杂数据类型的值存在堆里 栈中存堆里的地址

对象中的方法声明
fn:function()
{
consolel.log(123)
}

trim()方法的正确使用
input.value.trim()==''
截取字符串
substr(start,count)
slice(start,length)
substring(start,length)


//随机产生颜色
  const color = prompt('请输入true或者是false')

        function Getcolor(color) {
    
            if (color == 'true') {
                //方法一 rgb(255,255,255)
                const newcolor = fn1()
                document.querySelector('html').style.backgroundColor = newcolor
            }
            else {
                //方法二#ffffff  0~f
                const newcolor = fn2()
                document.querySelector('html').style.backgroundColor = newcolor
    
            }
    
        }
    
        Getcolor(color)
        function fn1() {
            let c = 'rgb('
            const arr = []
            for (let i = 0; i < 3; i++) {
                const random = Math.floor(Math.random() * 256)
                arr.push(random)
                c += arr[i] + ','
            }
            c = c.substr(0, c.length - 1)
            return c + ')'
    
        }
        function fn2() {
            let c = '#'
            const datacolor = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 'a', 'b', 'c', 'd', 'e', 'f']
            let newdata = []
            for (let i = 0; i < 6; i++) {
                const random = Math.floor(Math.random() * datacolor.length)
                newdata.push(datacolor[random])
                c += newdata[i]
            }
            return c
    
        }




日期时间的对象 new Date()

最快获得当前日期时间的写法是 toLocaleString() 
new data() 是指每过一秒钟获得一次当前的时间或日期

1、禁用按钮，使按钮不可点击document.getElementById("bt1").disabled=ture;

2、启用按钮，使按钮可点击document.getElementById("bt1").disabled=false;

想让页面一打开就启动计时器里的方法
将计时器里的代码封装成一个函数
先在计时器外面调用一下函数
计时器调用函数

当一个函数当做参数来传递给另外一个函数的时候，这个函数就是回调函数 callback
双击 dblclick()

开启定时器 容易忘记   
将定时器封装成一个方法 想要开启时只要调用一下该方法就行了
tx.value==''|| tx.value.trim() == ''   trim方法的正确使用
document.querySelectorAll('.cks:checked').length 获取所有被选中的小复选的数量
this指向调用者   e指向触发事件的对象
data-id='0' 自定义属性要从0开始 因为数组的下标是从0开始的

获取自定义属性
e.target.dataset.id 或者是 e.target.id

阻止事件冒泡
e.stopPropagation()
阻止默认行为
e.preventDefault() 

*匿名函数无法解绑
普通事件解绑 onclick() 用 onclick=null
addEventListener() 用removeEventListener('click',fn)

页面尺寸发生变化 resize事件
页面滚动就要添加scroll事件

获取盒子离浏览器顶部距离 offsetTop
获取盒子离浏览器左边距离 offsetLeft

获取页面滚走的距离用  document.documentElement.scrollTop  ||scrollLeft

  //如果判断条件用循环的话就可以不用自定义属性
  //如果用事件委托就要写自定义属性

var mydiv=document.querySelector('#mydiv');  // 获取伪元素所在的DOM对象

var mydivBefore=window.getComputedStyle(mydiv,'::before'); //获取伪元素

var fontSize=window.getComputedStyle(mydiv,'::before').getPropertyValue('font-size');//获取before伪元素的字号大小

js给伪元素添加事件监听

方式一C3属性：给父元素设置pointer-events: none ，给伪元素设置pointer-events: auto；
方式二：通过事件冒泡；

e.target 可以通过标签名和类名或者id查找子元素

//自动执行函数避免变量污染 结尾要加;隔开

创建节点
document.createElement('标签名')
获取父节点 parentNode

checkbox属性里的 ischecked 属性用来判断该被选中 true 表示被选中 false表示没有选中
nextElementSibling 获取当前节点的下一个节点
previousElementSibling 获取当前节点的上一个节点

*给页面添加滚动的过渡
html {
  scroll-behavior: smooth；
}

e.getTime() 得到时间戳

js获取元素的类名用 e.target.calssName属性
判断是否包含某个类名 e.target.classList.contains('') //true or false

追加 append(e) appendchild(e) 插入到父元素的最后面  重点
insertBefore(克隆的元素,插入的位置)  插入到某个元素的前面 
e.cloneNode(true) 克隆  //true 深克隆 
删除孩子 removeChild(e)
删除父亲 remove(e)


构造函数首字母要大写

盒子的宽高属性修改的时候要加px单位
mouseenter mouseleave  没有委托的功能 

for循环遍历数组 如果条件有一个不成立用return可以终止循环 但是forEach循环用return不能终止循环
*throw Error() //抛出异常 强制终止forEach遍历数组
关闭input的自动提示信息 autocomplete ='off'/ no

this.reset() 清空表单 重置
setInterval() 最低延迟100毫秒
setTimeout() 最低延迟40毫秒

让窗体跳到指定该的链接    window.location.href = 'http://www.baidu.com' 
loaction.reload(true) //强制刷新页面
history.go(1,-1,0)  前进，后退，刷新
sessionStorage 临时存储 只要关闭了浏览器保存的数据就会丢失

存储数据：localStorage.setItem(key,JSON.stringify(value))
获取数据：JSON.parse(localStorage.getItem(key))
删除：localStorage.removeItem('key')

arr.join('') //去除数组的逗号

JSON是一种基于JavaScript语法子集的开放标准数据交换格式

元素更换背景图片JS写法
    document.querySelector('div').style.backgroundImage = `url(./images/${arr[r]})`

 获取表格编号的正确写法  让数组的最后一位编号加1  容易忘记
 id: arr.length ? arr[arr.length - 1].id + 1 : 1 

渲染后台数据尽量减少Dom操作 推荐遍历数组渲染页面   推荐 map().join()
通过DOM操作  foreach循环或者for循环  map()+join() 三种方法完成页面渲染

map方法如果数组为空就不遍历和for循环一样
map((item,i)=>{})方法返回处理过的结果 是个数组

confirm() 确认框 返回 true false

Array.from(lis) 把伪数组转换为真数组
input标签里的required属性是指必写的属性

test()//正则检测
exec()//返回数组

元素更换背景图片JS写法
document.querySelector('div').style.backgroundImage = `url(./images/${arr[r]})`

放大镜原理
左边一个盒子放前景图片, 右边一个盒子放背景图片,右边背景图片的大小是左边盒子大小的2倍(推荐) 左右两边的盒子大小推荐写一样大 改变遮罩层的定位


getBoundingClentRect().left 盒子在浏览器的坐标
e.pageX 鼠标在页面上的坐标
 if (x < 100) mx = 0
 if (x >= 100 && x <= 300) mx = x - 100
 if (x > 300) mx = 200

变量提升只提升声明不提升赋值
arguments 动态参数 伪数组
...other 剩余参数 真数组
...arr 展开运算符
数组解构立即执行函数要加分号 ;
垃圾回收方法 引用计数法 标记清除法
foreach 遍历数组  不返回数组
filter() 过滤数组返回新数组
[A,B,C]=[1,2,3] 数组解构
 const data = [{ id, name, price, picture }] = goodsList 对象解构

闭包核心作用使变量驻留在内存不被回收


new关键字执行步骤
创建新对象
构造函数this指向新对象
执行构造函数的代码 修改this 添加新的属性
返回新对象


静态成员 构造函数公共的属性和方法
实例成员  对象单独的属性和方法


split(',')//将字符串分割成数组
substring('开始索引号'，'结束索引号')截取
includes('ele')包含
indexOf()获取字符索引号
replace(‘e’,'新')替换字符

arr.find((item)=>item>10)//返回满足条件的第一个元素

Number.toFixed(2) 保留两位小数


thorw new Error('参数不能为空') 抛异常

Object.values().join('/') //将对象的值转换为字符串
Object/keys() //获取对象的属性 
Object.assign() //赋值对象 合并对象


输入框输入内容 节流
网页尺寸发生改变 鼠标移动 滚动条移动 防抖

基本包装数据类型 数字型 布尔型 字符串型

${item.isChecked ? 'checked' : ''} 判断复选框是否选中

''表示没有内容 空数据

 input[type=checkbox] 属性选择器

共同点修改this指向
fn.call(对象，1，2，3)   //参数是1，2，3
fn.apply(对象，[1,2,3]) //参数必须是数组
fn.bind(对象，1，2，3)不调用函数 返回一个函数
定时器的this默认指向window 
reduce() 累计器

*非空判断强力推荐for循环

join('\r\n') //将数组转成字符串并且换行



/* 多行文字溢出显示省略号 */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 5;
    -webkit-box-orient: vertical;
	
/*单行文字溢出显示省略号*/
1.使用overflow: hidden把超出的内容进行隐藏；
2.然后使用white-space: nowrap设置内容不换行；
3.最后使用text-overflow: ellipsis设置超出内容为省略号

清除盒子塌陷的方法 display:table

原型和原型链
		原型对象：每个函数都有prototype属性 也加原型或者原型对象
		原型对象主要放一些共享的属性和方法给实例对象使用
		原型可以被继承
		原型链：每个实例对象都有__proto__属性 这个属性指向它的原型对象 
		原型对象也是对象 也有__proto__属性 指向原型对象的原型对象 这样一层一层形成的链式结构称为原型链 最顶层找不到返回null


Object.defineProperty()语法说明 只能添加属性不能添加方法
Object.defineProperty()的作用就是直接在一个对象上定义一个新属性，或者修改一个已经存在的属性

Object.defineProperty(obj, prop, desc)
obj 需要定义属性的当前对象
prop 当前需要定义的属性名
desc 属性描述符
一般通过为对象的属性赋值的情况下，对象的属性可以修改也可以删除，
但是通过Object.defineProperty()定义属性，通过描述符的设置可以进行更精准的控制对象属性。
Object.defineProperties()//给对象添加多个属性 

HTML选择器优先级 !important>id>类>标签>全选选择器
对象的id用字符串 推荐
//数组的替换
		arr = arr.fill({ id: '05', name: '张三' }, 4)
传统数组的删除方法
		  let arr = [1, 2, 3, 4, 5]
          arr.shift()//前删除
         arr.pop()//后删除
         arr.splice(1, 2)//从指定位置开始删除后面的元素 下标是从1开始的不是从0开始的
	     arr = arr.slice(0, 3)//从数组中返回选定的元素，作为一个新数组 下标从0开始
	     arr.filter() //根据条件删除
         arr = arr.filter(item => {
		 return item !== 2
         })
         console.log(arr)
非传统数组的删除方法
		arr.filter() //根据条件删除
		arr = arr.filter(item => {
            return item.id !== n
        })

数组的合并 arr.concat(6,7,8)

在html5中宽度可以被继承 但是高度不能被继承 display:table   宽度不能被继承
<iframe id="leftframe" align="left" width="700" height="100"></iframe> //超链接的显示盒子








